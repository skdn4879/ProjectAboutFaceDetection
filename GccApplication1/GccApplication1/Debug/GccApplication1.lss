
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000029c  00000330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800102  00800102  00000332  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000332  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000364  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a68  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000891  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000045b  00000000  00000000  000016d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00001b34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048b  00000000  00000000  00001b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000275  00000000  00000000  00002023  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002298  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e9       	ldi	r30, 0x9C	; 156
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 30       	cpi	r26, 0x06	; 6
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ce d0       	rcall	.+412    	; 0x260 <main>
  c4:	e9 c0       	rjmp	.+466    	; 0x298 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <USART1_init>:

int is_on_led1 = 0; //LED1의 켜짐 여부 플래그
int is_on_led2 = 0; //LED2의 켜짐 여부 플래그

void USART1_init(unsigned int UBRR1){
	UBRR1H = (unsigned char)(UBRR1 >> 8);
  c8:	90 93 98 00 	sts	0x0098, r25	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = (unsigned char)UBRR1;
  cc:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	UCSR1B = (1 << RXEN1);
  d0:	80 e1       	ldi	r24, 0x10	; 16
  d2:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
  d6:	08 95       	ret

000000d8 <RX1_CH>:
} //기본설정

char RX1_CH(void){
	while(!(UCSR1A & (1 << RXC1))); //수신이 완료될 때까지 대기
  d8:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
  dc:	88 23       	and	r24, r24
  de:	e4 f7       	brge	.-8      	; 0xd8 <RX1_CH>
	rx_flag = 1;
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	return UDR1; //수신된 문자 반환
  e6:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
}
  ea:	08 95       	ret

000000ec <doSomethingOn>:
		
    }
}

void doSomethingOn(int deviceNum){
	if(deviceNum == 1){
  ec:	81 30       	cpi	r24, 0x01	; 1
  ee:	91 05       	cpc	r25, r1
  f0:	c1 f4       	brne	.+48     	; 0x122 <doSomethingOn+0x36>
		if(is_on_led2 == 0){ //LED2가 꺼진 상태이면
  f2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  f6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
  fa:	89 2b       	or	r24, r25
  fc:	49 f4       	brne	.+18     	; 0x110 <doSomethingOn+0x24>
			PORTA = 0x01; //LED1만 킴
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	8b bb       	out	0x1b, r24	; 27
			is_on_led1 = 1; //플래그 활성화
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <is_on_led1+0x1>
 10a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <is_on_led1>
 10e:	08 95       	ret
		} else{				//LED2가 켜진 상태이면
			PORTA = 0x03;	//둘 다 킴
 110:	83 e0       	ldi	r24, 0x03	; 3
 112:	8b bb       	out	0x1b, r24	; 27
			is_on_led1 = 1; //플래그 활성화
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <is_on_led1+0x1>
 11c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <is_on_led1>
 120:	08 95       	ret
		}
		
	} else if(deviceNum == 2){
 122:	82 30       	cpi	r24, 0x02	; 2
 124:	91 05       	cpc	r25, r1
 126:	c1 f4       	brne	.+48     	; 0x158 <doSomethingOn+0x6c>
		if(is_on_led1 == 0){
 128:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <is_on_led1>
 12c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <is_on_led1+0x1>
 130:	89 2b       	or	r24, r25
 132:	49 f4       	brne	.+18     	; 0x146 <doSomethingOn+0x5a>
			PORTA = 0x02;
 134:	82 e0       	ldi	r24, 0x02	; 2
 136:	8b bb       	out	0x1b, r24	; 27
			is_on_led2 = 1;
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 140:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 144:	08 95       	ret
		} else{
			PORTA = 0x03;
 146:	83 e0       	ldi	r24, 0x03	; 3
 148:	8b bb       	out	0x1b, r24	; 27
			is_on_led2 = 1;
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 152:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 156:	08 95       	ret
		}
		
	} else if(deviceNum == 3){
 158:	83 30       	cpi	r24, 0x03	; 3
 15a:	91 05       	cpc	r25, r1
 15c:	19 f5       	brne	.+70     	; 0x1a4 <doSomethingOn+0xb8>
		PORTC = GATE_MOTOR_GO;
 15e:	83 e1       	ldi	r24, 0x13	; 19
 160:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 162:	2f e5       	ldi	r18, 0x5F	; 95
 164:	3a ee       	ldi	r19, 0xEA	; 234
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	21 50       	subi	r18, 0x01	; 1
 16a:	30 40       	sbci	r19, 0x00	; 0
 16c:	80 40       	sbci	r24, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <doSomethingOn+0x7c>
 170:	00 c0       	rjmp	.+0      	; 0x172 <doSomethingOn+0x86>
 172:	00 00       	nop
		_delay_ms(300);
		PORTC = MOTOR_STOP;
 174:	83 e0       	ldi	r24, 0x03	; 3
 176:	85 bb       	out	0x15, r24	; 21
 178:	9f e7       	ldi	r25, 0x7F	; 127
 17a:	26 e9       	ldi	r18, 0x96	; 150
 17c:	38 e9       	ldi	r19, 0x98	; 152
 17e:	91 50       	subi	r25, 0x01	; 1
 180:	20 40       	sbci	r18, 0x00	; 0
 182:	30 40       	sbci	r19, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <doSomethingOn+0x92>
 186:	00 c0       	rjmp	.+0      	; 0x188 <doSomethingOn+0x9c>
 188:	00 00       	nop
		_delay_ms(50000);
		PORTC = GATE_MOTOR_BACK;
 18a:	93 e2       	ldi	r25, 0x23	; 35
 18c:	95 bb       	out	0x15, r25	; 21
 18e:	9f e5       	ldi	r25, 0x5F	; 95
 190:	2a ee       	ldi	r18, 0xEA	; 234
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	91 50       	subi	r25, 0x01	; 1
 196:	20 40       	sbci	r18, 0x00	; 0
 198:	30 40       	sbci	r19, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <doSomethingOn+0xa8>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <doSomethingOn+0xb2>
 19e:	00 00       	nop
		_delay_ms(300);
		PORTC = MOTOR_STOP;
 1a0:	85 bb       	out	0x15, r24	; 21
 1a2:	08 95       	ret
	} else if(deviceNum == 4){
 1a4:	84 30       	cpi	r24, 0x04	; 4
 1a6:	91 05       	cpc	r25, r1
 1a8:	19 f4       	brne	.+6      	; 0x1b0 <doSomethingOn+0xc4>
		PORTC = CIRCULAR_MOTOR_GO;
 1aa:	83 e8       	ldi	r24, 0x83	; 131
 1ac:	85 bb       	out	0x15, r24	; 21
 1ae:	08 95       	ret
	} else if(deviceNum == 0){
 1b0:	89 2b       	or	r24, r25
 1b2:	71 f4       	brne	.+28     	; 0x1d0 <doSomethingOn+0xe4>
		PORTA = 0x03;
 1b4:	83 e0       	ldi	r24, 0x03	; 3
 1b6:	8b bb       	out	0x1b, r24	; 27
		is_on_led1 = 1;
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <is_on_led1+0x1>
 1c0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <is_on_led1>
		is_on_led2 = 1;
 1c4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 1c8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		PORTC = CIRCULAR_MOTOR_GO;
 1cc:	83 e8       	ldi	r24, 0x83	; 131
 1ce:	85 bb       	out	0x15, r24	; 21
 1d0:	08 95       	ret

000001d2 <doSomethingOff>:
	}
}

void doSomethingOff(int deviceNum){
	if(deviceNum == 6){
 1d2:	86 30       	cpi	r24, 0x06	; 6
 1d4:	91 05       	cpc	r25, r1
 1d6:	99 f4       	brne	.+38     	; 0x1fe <doSomethingOff+0x2c>
		if(is_on_led2 == 1){
 1d8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1dc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	39 f4       	brne	.+14     	; 0x1f2 <doSomethingOff+0x20>
			PORTA = 0x02;
 1e4:	82 e0       	ldi	r24, 0x02	; 2
 1e6:	8b bb       	out	0x1b, r24	; 27
			is_on_led1 = 0;
 1e8:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <is_on_led1+0x1>
 1ec:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <is_on_led1>
 1f0:	08 95       	ret
		} else{
			PORTA = 0x00;
 1f2:	1b ba       	out	0x1b, r1	; 27
			is_on_led1 = 0;
 1f4:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <is_on_led1+0x1>
 1f8:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <is_on_led1>
 1fc:	08 95       	ret
		}
		} else if(deviceNum == 7){
 1fe:	87 30       	cpi	r24, 0x07	; 7
 200:	91 05       	cpc	r25, r1
 202:	a1 f4       	brne	.+40     	; 0x22c <doSomethingOff+0x5a>
			if(is_on_led1 == 1){
 204:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <is_on_led1>
 208:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <is_on_led1+0x1>
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	39 f4       	brne	.+14     	; 0x21e <doSomethingOff+0x4c>
				PORTA = 0x01;
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	8b bb       	out	0x1b, r24	; 27
				is_on_led2 = 0;
 214:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 218:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
 21c:	05 c0       	rjmp	.+10     	; 0x228 <doSomethingOff+0x56>
			} else{
				PORTA = 0x00;
 21e:	1b ba       	out	0x1b, r1	; 27
				is_on_led2 = 0;
 220:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 224:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
			}
		PORTA = 0x00;
 228:	1b ba       	out	0x1b, r1	; 27
 22a:	08 95       	ret
	} else if(deviceNum == 8){
 22c:	88 30       	cpi	r24, 0x08	; 8
 22e:	91 05       	cpc	r25, r1
 230:	19 f4       	brne	.+6      	; 0x238 <doSomethingOff+0x66>
		PORTC = MOTOR_STOP;
 232:	83 e0       	ldi	r24, 0x03	; 3
 234:	85 bb       	out	0x15, r24	; 21
 236:	08 95       	ret
	} else if(deviceNum == 9){
 238:	89 30       	cpi	r24, 0x09	; 9
 23a:	91 05       	cpc	r25, r1
 23c:	19 f4       	brne	.+6      	; 0x244 <doSomethingOff+0x72>
		PORTC = MOTOR_STOP;
 23e:	83 e0       	ldi	r24, 0x03	; 3
 240:	85 bb       	out	0x15, r24	; 21
 242:	08 95       	ret
	} else if(deviceNum == 5){
 244:	05 97       	sbiw	r24, 0x05	; 5
 246:	59 f4       	brne	.+22     	; 0x25e <doSomethingOff+0x8c>
		PORTA = 0x00;
 248:	1b ba       	out	0x1b, r1	; 27
		is_on_led1 = 0;
 24a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <is_on_led1+0x1>
 24e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <is_on_led1>
		is_on_led2 = 0;
 252:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 256:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
		PORTC = MOTOR_STOP;
 25a:	83 e0       	ldi	r24, 0x03	; 3
 25c:	85 bb       	out	0x15, r24	; 21
 25e:	08 95       	ret

00000260 <main>:
int main(void)
{
	
	char rx_buf; //수신 데이터를 담을 변수
	int remDevice; //동작시킬 기기를 구분할 변수
	USART1_init(103);
 260:	87 e6       	ldi	r24, 0x67	; 103
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	31 df       	rcall	.-414    	; 0xc8 <USART1_init>
	
	DDRA = 0x07;
 266:	87 e0       	ldi	r24, 0x07	; 7
 268:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0x01;
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFF;
 26e:	8f ef       	ldi	r24, 0xFF	; 255
	
    /* Replace with your application code */
    while (1) 
    {
		rx_buf = RX1_CH();
 270:	84 bb       	out	0x14, r24	; 20
 272:	32 df       	rcall	.-412    	; 0xd8 <RX1_CH>
		remDevice = (int)rx_buf - '0';
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	c0 97       	sbiw	r24, 0x30	; 48
		
		if(rx_flag){ //수신되면
 278:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 27c:	22 23       	and	r18, r18
 27e:	c9 f3       	breq	.-14     	; 0x272 <main+0x12>
			rx_flag = 0; //플래그 초기화
 280:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			
			if(remDevice < 5){
 284:	85 30       	cpi	r24, 0x05	; 5
 286:	91 05       	cpc	r25, r1
				doSomethingOn(remDevice);
 288:	14 f4       	brge	.+4      	; 0x28e <main+0x2e>
 28a:	30 df       	rcall	.-416    	; 0xec <doSomethingOn>
 28c:	f2 cf       	rjmp	.-28     	; 0x272 <main+0x12>
			} else if(remDevice >= 5){
 28e:	85 30       	cpi	r24, 0x05	; 5
 290:	91 05       	cpc	r25, r1
				doSomethingOff(remDevice);
 292:	7c f3       	brlt	.-34     	; 0x272 <main+0x12>
 294:	9e df       	rcall	.-196    	; 0x1d2 <doSomethingOff>
 296:	ed cf       	rjmp	.-38     	; 0x272 <main+0x12>

00000298 <_exit>:
 298:	f8 94       	cli

0000029a <__stop_program>:
 29a:	ff cf       	rjmp	.-2      	; 0x29a <__stop_program>
